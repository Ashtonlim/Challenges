# for IDA v7.4

import ida_dbg
import os
import tempfile
	
# return the address of main()
def getMainEa():
	# get a list of tuples that contain the address of the function and the function name
	for n in Names():
		if n[1] == '_main':
			return n[0]


# dynamically find flags by running with debugger while setting breakpoints till found the flags
def findFlag(addrToContinue, passwordString):
	listOfBptAddr = []
	toRunDbg = True
	currentInstr = addrToContinue

	# iterate through the rest of main() to set breakpoint after each subroutine call
	while 1:
		currentInstr = next_head(currentInstr)

		# go to the instruction after subroutine to set breakpoint
		if "call" in print_insn_mnem(currentInstr):
			# go to the next instruction after the call subroutine to set breakpoint
			currentInstr = next_head(currentInstr)

			# set breakpoint and store in a list so later and know where are all the breakpoints to clear them
			add_bpt(currentInstr)
			listOfBptAddr.append(currentInstr)

		# stop looking for more subroutine cause reached return statement
		elif "retn" in print_insn_mnem(currentInstr):
			# stop the debugger (async)
			exit_process()
			print("Fail to find flags!")
			break

	# start running the debugger (async)
	start_process(None, passwordString)

	# start to look at the TEMP folder for the files whenever a breakpoint is reached
	while 1:
		# blocking to wait till exception event occurs since start_process() is async
		wait_for_next_event(WFNE_SUSP|WFNE_CONT, -1)

		# try to get the dropTemp.jpg and part#.jpg
		if getFlags():
			# stop the debugger (async)
			exit_process()
			print("Found the flags!")
			break

		# continue the debugger's execution (sync)
		ida_dbg.continue_process()

	# delete all the breakpoints set earlier
	for bptAddr in listOfBptAddr:
		del_bpt(bptAddr)



# to find the password needed to run the malware
def findPassword():
	foundArg1 = False
	# get address at _main
	startOfMainFunc = getMainEa()
	currentInstr = startOfMainFunc

	# traverse to find the checkPassword function
	while 1:
		currentInstr = next_head(currentInstr)
		# check password is obtained from argv
		# next calling function should be the password checker function
		if "argv" in print_operand(currentInstr, 1):
			foundArg1 = True

		# check if found the password checker function
		if foundArg1 and "call" in print_insn_mnem(currentInstr):
			instrAddrBeforeFuncCall = currentInstr
			# jump to the password checker function
			
			passwordCheckerFuncAddr = get_name_ea_simple(print_operand(currentInstr, 0))
			jumpto(passwordCheckerFuncAddr)
			
			currentInstr = passwordCheckerFuncAddr
			while 1:
				currentInstr = next_head(currentInstr)
				
				# get password compared from global variable using 'offset' keyword
				if 'mov' in print_insn_mnem(currentInstr) and 'offset' in print_operand(currentInstr, 1):
					offset_address = get_operand_value(currentInstr, 1)
					passwordString = get_strlit_contents(offset_address).decode("utf-8")
					print("Password is: " + passwordString)
					break
			
			break
			
	return instrAddrBeforeFuncCall, passwordString


# check if flags which are droppedTemp.jpg and part#.jpg are in the temp file already
# move them to the storage folder if both are present
def getFlags():
	droppedTempFile = None
	partFile = None
	# flag storage location
	# remove ".exe" before using analyzed file name as new folder storage name if there is ".exe" extension
	folderStoragePath = '"flags/' + get_root_filename() + '"'

	#get a list of files in from temporary folder
	files = os.listdir(tempfile.gettempdir())

	# iterate through the files in the folder and find if both flags are in that TEMP folder already
	for file in files:
		if "droppedTemp.jpg" in file:
			droppedTempFile = file
		elif "part" in file and ".jpg" == file[-4:]:
			partFile = file

	# can store the files into the flag storage once all of them have been spawn by the malware
	if droppedTempFile is not None and partFile is not None:
		# make the folder to store the flags and move the flags to that folder
		os.system("mkdir " + folderStoragePath)
		os.system('move "' + tempfile.gettempdir() + '\\' + droppedTempFile + '" ' + folderStoragePath)
		os.system('move "' + tempfile.gettempdir() + '\\' + partFile + '" ' + folderStoragePath)

		# notify that all flags are found
		return True
	else:
		# notify that not all flags are found
		return False


auto_wait()
load_debugger('win32', 0)
addrToContinue, passwordString = findPassword()
findFlag(addrToContinue, passwordString)
exit(0)